#!/usr/sbin/nft -f
# code: language=nftables
# note: hint to vs code syntax highlighting does not work, keep nft shebang on top for testing for now

#######################################################################################################################
#
# Copyright Â© 2024 Robert Gregor
# MIT license
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#




#######################################################################################################################
#
# All In One nftables Router Firewall
#
# https://github.com/rgregor/debian-12-router
#
# inspired by OpenWRT, FireHOL, fail2ban and https://wiki.archlinux.org/title/Nftables#Tips_and_tricks
# also partially but proudly powered by ChatGPT
#
# Please note that this nftables setup is not a replacement for tools such as fail2ban and/or Crowdsec
# however it provides basic dynamic blocking functionality against portscans,
# synfloods, and too frequent reconnects on certain ports. (i.e. SSH bruteforcing)
#
# other very helpful reads: https://unix.stackexchange.com/questions/581964/create-dynamic-blacklist-with-nftables
#
#######################################################################################################################
#   !!!   W A R N I N G   !!!   W A R N I N G   !!!!   W A R N I N G   !!!!   W A R N I N G   !!!!   W A R N I N G    #
#######################################################################################################################
#
# THIS FIREWALL ASSUMES THAT YOUR ROUTER RUNS LOCAL NTP AND DNS SERVICES ON ALL LAN INTERFACES
# IF THIS IS NOT THE CASE, THIS FIREWALL WILL BREAK NTP AND DNS IN YOUR LOCAL NETWORKS!
#
# ALSO: DON'T FORGET TO CUSTOMIZE ACCORDING TO YOUR INTERFACE NAMES AND EXPOSED SERVICES
#
#######################################################################################################################
#   !!!   W A R N I N G   !!!   W A R N I N G   !!!!   W A R N I N G   !!!!   W A R N I N G   !!!!   W A R N I N G    #
#######################################################################################################################


# Inteeded Use Case:
#
# - Home / Small Office Router with one main WAN interface
#       - Tested on Debian 12 on Intel N100 Mini-ITX system with Intel X710 / I225 NICs for main interfaces
# - WAN interface is a symmetric, high bandwidth, low latency connection, in my case:
#       - ISP requires DHCPv4 lease / Ipv6 DHCPv6 / RAs on VLAN 10, no use of PPPoE or similar clutches from the past
#       - tested with Single Mode 1G SFP fibre modules to ISP.. with <=1ms latency to ISP
# - LAN interfaces may be multiple, layer 2 isolated  LAN interfaces and/or VLANS
#       - regular LAN: clients that can have their connections forwarded to the guest VLAN and WAN and all router ports
#           - place trusted workstations / laptops / local servers in here
#           - Dual Stack IPv4 / IPv6
#
#       - guest VLAN: clients that can be accessed from main lan
#            - ruleset tested / inteded with IPv4 only at the moment
#            - can only forward connections to wan, can only use DHCP, DNS and NTP from router
#            - consider placing your smartphones / tablets / WiFI printers here by default
#
#       - ghetto VLAN: clients that can only have forwarded connections to wan
#            - intended for IPv4 only
#            - can only use DHCP, DNS and NTP from router
#            - put your off the shelf "Smart" / IoT devices here if they rely on cloud servers for communication:
#                   - e.g. Smart Plugs, Smart WiFI Lights, Internet Radios, Vaccuum Robots, ...
#            - consider enabling WiFi client isolation in your AP as well for this VLAN
#
# Features:
#
#   - Dual Stack IPv4 / v6
#       - intended for IPv4 NAT + DHCP
#       - DHCP, DNS and NTP servers expected to be running on router
#       - IPv6 used in conjunction with PD/ DHCPv6 from WAN + RA / DHCPv6 locally
#   - Flowtable Offloading for established / related forwarded connections (improved performance)
#   - Transparently proxy/rewrite unencrypted DNS and NTP requests to WAN
#       - route them to local NTP and DNS server instead
#       - reduce unencrypted traffic to WAN
#       - improve DNS based adblocking in case certain Apps / IoT devices ignore DHCP DNS server recommendations
#       - reduce WAN traffic, improve time sync accuracy, avoid any leaks to public NTP servers (e.g. time.windows.com, time.android.com)
#   - Rate limiting on ICMP and SYN packets from WAN, guest and ghetto VLANs
#   - Auto blocking on SYN portscans from WAN, guest and ghetto VLANs
#   - Auto blocking of XMAS / NULL / invalid flags TCP scans from WAN, guest and ghetto VLANs
#   - Allow WAN IGMP and Ipv6 MLD
#   - Inter VLAN / Lan / Zone routing through the firewall (no bridges used, complete layer 2 isolation is an intended security feature)
#
# Planned Features:
#
#   - Manual management of Docker Net Forwarding
#   - Fail2Ban Integration or External Blocklist integration (e.g. Spamhaus DROP or Abuse.ch blocklists)
#       - block incoming traffic from those directly on netdev / ingress hook
#       - stop outgoing traffic on netdev level
#   - Wireguard tunnels / forwarding / natting
#       - e.g. route all ghetto traffic to wan through VPN tunnel
#
# Not Planned:
#   - QoS, Traffic Shaping:
#           - I use symmetric, low latency WAN connections with few simultaneous clients (<20) inside / outside the network
#           - individual clients are not expected to regularly spawn excessive p2p traffic or flood the line with thousands of simultaneous connections
#           - in my testing, even running one or two bittorent clients does not negatively impact VoIP / WebRTC performance for other clients
#

flush ruleset

# SNAT for IPv4 only
table ip nat {

    # note named sets can not be shared across different tables,
    # if changing wan ifaces here, consider changing them for the filter table below as well
    set wan_ifaces {
        type ifname
        elements = { "wan",  "enp1s0f0np0" }
    }

    set local_ip4s {
        type ipv4_addr
        flags interval
        elements = { 192.168.0.0/16 }
    }

    map ifname_to_internal_ip4 {
        type ifname: ipv4_addr
        elements = {
            "enp1s0f1np1": 192.168.10.1,
            "enp2s0": 192.168.88.1,
            "enp3s0": 192.168.20.1,
            "guest": 192.168.100.1,
            "ghetto": 192.168.254.1
        }
    }

    set intercepted_ports {
        type inet_proto . inet_service
        elements = {
            udp . 53,
            tcp . 53,
            udp . 123
        }
        comment "dst ports to be intercepted instead of being forwarded to wan"
    }

    chain prerouting {
        type nat hook prerouting priority -100; policy accept;
        iif lo accept comment "we do not do any dnat to/from lo, otherwise we would need to disable martian checks on interfaces"
        ip daddr @local_ip4s accept comment "do not dnat if the destination ip is in the network"
        iifname @wan_ifaces accept comment "no dnat from the outside for now"

        # map protocols and ports to internal ips based on incoming if name...
        # WARNING: do not use any ohter protocols than udp and tcp here
        # ... "th" used hardcoded byte offsets which happen to be identical for udp and tcp for dport
        meta l4proto . th dport @intercepted_ports dnat to iifname map @ifname_to_internal_ip4
    }

    chain postrouting {
        type nat hook postrouting priority 100; policy accept;
        # Masquerade / SNAT outgoing IPv4 traffic to the WAN
        oifname @wan_ifaces masquerade
    }
}

# DNAT for IPv6 (intercept outgoing connections)
table ip6 nat {

    # note named sets can not be shared across different tables,
    # if changing wan ifaces here, consider changing them for the filter table below as well
    set wan_ifaces {
        type ifname
        elements = { "wan",  "enp1s0f0np0" }
    }

    set local_ip6s {
        type ipv6_addr
        flags interval
        elements = {
            fc00::0/6 # this captures ULAs, Link local fd80::/8 and multicast ff02::/8
        }
    }


    map ifname_to_internal_ip6 {
        type ifname: ipv6_addr
        elements = {
            "enp1s0f1np1": fd99:cafe:10::1,
            "enp3s0": fd99:cafe:20::1
        }
    }

    set intercepted_ports {
        type inet_proto . inet_service
        elements = {
            udp . 53,
            tcp . 53,
            udp . 123
        }
        comment "dst ports to be intercepted instead of being forwarded to wan"
    }

    chain prerouting {
        type nat hook prerouting priority -100; policy accept;
        iif lo accept comment "we do not do any dnat to/from lo, otherwise we would need to disable martian checks on interfaces"
        ip6 daddr @local_ip6s accept comment "do not dnat if the destination ip is in the network"
        iifname @wan_ifaces accept comment "no dnat from the outside for now"

        # map protocols and ports to internal ips based on incoming if name...
        # WARNING: do not use any ohter protocols than udp and tcp here
        # ... "th" used hardcoded byte offsets which happen to be identical for udp and tcp for dport
        meta l4proto . th dport @intercepted_ports dnat to iifname map @ifname_to_internal_ip6
    }
}

# The actual filtering for ipv4 and ipv6
table inet filter {
    # note: the nat table above uses a separate set of interface sets.. if you change wan interfaces there, they need to be changed here as well!
    set wan_ifaces {
        type ifname
        elements = { "wan",  "enp1s0f0np0" } # TBD for slight performance improvements, disable the enp1s0f0 interface completely and remove it from this set
    }

    set lan_ifaces {
        type ifname
        elements = { "enp3s0", "enp2s0", "enp1s0f1np1" }
    }

    set guest_ifaces {
        type ifname
        elements = { "guest" }
    }

    set ghetto_ifaces {
        type ifname
        elements = { "ghetto" }
    }

    # set docker_ifaces {
    #     type ifname
    #     elements = { "docker0" }
    # }

    # set vpn_ifaces {
    #     type ifname
    #     elements = { "wg0" }
    # }

    # Define IPv4 bogon IP set
    set ipv4_bogons {
        type ipv4_addr
        flags interval
        elements = {
            0.0.0.0/8,
            10.0.0.0/8,
            100.64.0.0/10,
            127.0.0.0/8,
            169.254.0.0/16,
            172.16.0.0/12,
            192.0.0.0/24,
            192.0.2.0/24,
            192.168.0.0/16, # you
            198.18.0.0/15,
            198.51.100.0/24,
            203.0.113.0/24,
            224.0.0.0/3
        }
    }

    # Define IPv6 bogon IP set
    set ipv6_bogons {
        type ipv6_addr
        flags interval
        elements = {
            ::/8,
            100::/64,
            2001:db8::/32,
            fc00::/7,
            2002::/16,
            3fff::/20
        }
    }

    set ipv4_whitelist {
        comment "static IP whitelist, entries can never be added to IP blocklist"
        type ipv4_addr
        flags interval
        elements = {
            127.0.0.1/24,
            192.168.1.0/24,
            192.168.10.0/24,
            192.168.20.0/24,
            185.228.136.239
            # TBD add docker and vpn prefixes here
        }
    }

    set ipv6_whitelist {
        comment "static IP whitelist, entries can never be added to IP blocklists"
        type ipv6_addr
        flags interval
        elements = {
            ::1,
            fe80::/16,
            2a03:4000:23:f7::/64
            #TBD add docker and vpn prefixes here
        }
    }

    set ipv4_dyn_blocks {
        type ipv4_addr
        flags dynamic, timeout
        timeout 30m
        comment "dynamically updated set of blocked hosts"
    }

    set ipv6_dyn_blocks {
        type ipv6_addr
        flags dynamic, timeout
        timeout 30m
        comment "dynamically updated set of blocked hosts"
    }

    set ipv4_conn_limit {
        type ipv4_addr
        size 65535
        flags dynamic
    }

    set ipv6_conn_limit {
        type ipv6_addr
        size 65535
        flags dynamic
    }


    chain add_dyn_block {
        ip saddr != @ipv4_whitelist log prefix "[nftables] adding to IPv4 blocklist" counter add @ipv4_dyn_blocks { ip saddr } drop
        ip6 saddr and ffff:ffff:ffff:ffff:: != @ipv6_whitelist log prefix "[nftables] adding to IPv6 blocklist" counter add @ipv6_dyn_blocks { ip6 saddr and ffff:ffff:ffff:ffff:: } drop
        log prefix "[nftables] skipping blocking of whitelisted IPv4/IPv6, denied: " counter drop
    }

    chain drop_dyn_blocks {
        ip saddr != @ipv4_dyn_blocks return
        ip6 saddr and ffff:ffff:ffff:ffff:: != @ipv6_dyn_blocks return

        ip protocol { tcp, udp, icmp } limit rate over 600/minute counter drop
        ip6 nexthdr { tcp, udp, icmp } limit rate over 600/minute counter drop

        delete @ipv4_dyn_blocks { ip saddr }
        counter add @ipv4_dyn_blocks { ip saddr }

        delete @ipv6_dyn_blocks { ip6 saddr and ffff:ffff:ffff:ffff:: }
        counter add @ipv6_dyn_blocks { ip6 saddr and ffff:ffff:ffff:ffff:: }

        drop
    }

    chain drop_bogon_src {
        # Drop RFC2827 - IETF BCP38 / Bogons / Martian Packets
        ip saddr @ipv4_bogons log prefix "[nftables] IPv4 BOGON src denied: " counter drop
        ip6 saddr @ipv6_bogons log prefix "[nftables] IPv6 BOGON src denied: " counter drop
        return
    }

    chain reject_with_icmp {
        reject with icmpx type admin-prohibited
    }

    # this chain drops packets
    # additionally if the rate of drops / hour exceeds a certain rate, the source ip/ip6 will be added to the dynamic blocklist
    chain drop_or_block {
        ip protocol { tcp, udp, icmp } meter drop_counter_ip4 { ip saddr limit rate over 10/hour } jump add_dyn_block
        ip6 nexthdr { tcp, udp, icmp } meter drop_counter_ip6 { ip6 saddr and ffff:ffff:ffff:ffff:: limit rate over 10/hour } jump add_dyn_block
        drop
    }

    chain protect_num_conns {
        tcp flags syn add @ipv4_conn_limit { ip saddr ct count over 300 } counter reject with tcp reset
        tcp flags syn add @ipv6_conn_limit { ip6 saddr and ffff:ffff:ffff:ffff:: ct count over 300 } counter reject with tcp reset
        return
    }

    chain protect_prerouting_local {
        ct state new meter new_conn_rate_local_ip4 { ip saddr limit rate over 25/second burst 200 packets } log prefix "[nftables] new connection rate exceded: " counter jump reject_with_icmp
        ct state new meter new_conn_rate_local_ip6 { ip6 saddr and ffff:ffff:ffff:ffff:: limit rate over 25/second burst 50 packets } log prefix "[nftables] new connection rate exceeded: " counter jump reject_with_icmp
        jump protect_num_conns
        accept
    }

    chain protect_prerouting_wan {
        jump drop_dyn_blocks
        jump drop_bogon_src
        # syn flood per source ip
        ct state new meter syn_rate_wan_ip4 { ip saddr limit rate over 50/second burst 200 packets } log prefix "[nftables] syn rate excceded: " counter jump drop_or_block
        ct state new meter syn_rate_wan_ip6 { ip6 saddr and ffff:ffff:ffff:ffff:: limit rate over 50/second burst 200 packets } log prefix "[nftables] syn rate excceded: " counter jump drop_or_block
        jump protect_num_conns
        accept
    }

    # chain ingress {
    #     type filter hook ingress priority -200; policy accept;
    #     iif lo accept
    #     # coarse and early syn flood protection
    #     tcp flags syn limit rate over 300/second burst 1000 drop
    # }

    chain prerouting {
        # keep priority above -200 to have conntrack performed before this chain is executed!
        # keep below -150 to apply before mangle
        # note that anything accepted here can still be blocked later in the input or forward chains
        type filter hook prerouting priority -170; policy accept;

        # note that this should also inhibit XMAS / NULL scans from inside the network to anywhere else
        ct state invalid counter drop
        iif lo accept

        ct state { established, related } counter accept

        # NB: the rule above reduces resource consunmption but will not end existing connections
        # (via protect_prerouting_*) when remote hosts have just been blocked

        iifname @lan_ifaces counter accept
        iifname @wan_ifaces counter jump protect_prerouting_wan
        iifname @guest_ifaces counter jump protect_prerouting_local
        iifname @ghetto_ifaces counter jump protect_prerouting_local
    }

    chain wan_input {

        # note that this chain is used only for new connections

        # wireguard custom port, wireguard has minimal attack surface
        # and will just drop any invalid traffic silently and has little overhead
        # so no extra rules here
        udp dport {55555} counter accept

        # the SSH daemon config might limit logins anyway,
        # however with the rules here offenders are blocked completely
        # from all services directly in the prerouting chain,
        # any further attempts will also reset the cooldown timers to keep them banned
        tcp dport 22 meter ssh_reconnect_limit_ip4 { ip saddr limit rate 10/hour } counter accept
        tcp dport 22 meter ssh_reconnect_limit_ip6 { ip6 saddr and ffff:ffff:ffff:ffff:: limit rate 10/hour } counter accept
        tcp dport 22 counter jump drop_or_block

        # accept incoming IGMP multicast configuration
        ip protocol igmp limit rate 5/second burst 10 packets counter accept
        # accept IPv6 MLD Multicasts configuration
        ip6 saddr fe80::/10 icmpv6 type . icmpv6 code {
            mld-listener-query . no-route,
            mld-listener-report . no-route,
            mld-listener-done . no-route,
            mld2-listener-report . no-route
        } limit rate 5/second burst 10 packets counter accept

        # pings
        icmp type echo-request limit rate 5/second burst 10 packets accept
        icmpv6 type echo-request limit rate 5/second burst 10 packets accept

        # Allow DHCPv4 and DHCPv6 traffic (but they should actually be already covered by accept established / related )
        udp dport 68 limit rate 5/second burst 10 packets counter accept  # DHCPv4 client port
        udp dport 546 limit rate 5/second burst 10 packets counter accept # DHCPv6 client port
        # IPv6 RA / ND
        icmpv6 type { nd-neighbor-solicit, nd-router-advert, nd-neighbor-advert } limit rate 5/minute burst 10 packets counter accept

        log prefix "[nftables] wan_input denied: " counter jump drop_or_block
    }

    chain lan_input {
        # note that this chain is used only for new connections

        accept
        log prefix "[nftables] lan_input denied: " counter jump reject_with_icmp
    }


    chain guest_input {
        # note that this chain is used only for new connections
        #only allow DNS, DHCPv4 and NTP on router
        udp dport { 53, 67, 123 } accept
        log prefix "[nftables] guest_input denied: " counter jump reject_with_icmp
    }

    chain ghetto_input {
        # note that this chain is used only for new connections
        #only allow DNS, DHCPv4 and NTP on router
        udp dport { 53, 67, 123 } accept
        log prefix "[nftables] ghetto_input denied: " counter jump reject_with_icmp
    }

    chain input {
        type filter hook input priority 0; policy drop;

        # Allow established and related connections
        ct state { established, related } counter accept
        ct state invalid counter drop

        # Allow loopback traffic
        iif lo accept

        # Jump to specific chains based on the interface
        iifname @wan_ifaces counter jump wan_input
        iifname @lan_ifaces counter jump lan_input
        iifname @guest_ifaces counter jump guest_input
        iifname @ghetto_ifaces counter jump ghetto_input
    }

    chain wan_forward {
        counter drop
    }

    chain lan_forward {
        oifname @ghetto_ifaces counter jump reject_with_icmp
        counter accept
    }

    chain guest_forward {
        oifname @wan_ifaces counter accept
        counter jump reject_with_icmp
    }

    chain ghetto_forward {
        oifname @wan_ifaces counter accept
        counter jump reject_with_icmp
    }

    # used for SW offloading established / related connections, see forward chain
    # SEE NOTES ON FLOWTABLE UPLOAD IN HEADER OF THIS FILE!
    #flowtable fwdtable {
    #    hook ingress priority 0;
    #    devices = { wan, enp1s0f0np0, enp1s0f1np1, enp2s0, enp3s0, guest, ghetto }
    #}

    chain forward {
        type filter hook forward priority 0; policy drop;

        # Offload established connections to the flowtable.. for ipv4, v6 and udp + tcp
        # SEE NOTES ON FLOWTABLE UPLOAD IN HEADER OF THIS FILE!
        #meta l4proto { tcp, udp } ct state { established, related } flow offload @fwdtable counter

        # Allow established and related connections
        ct state { established, related } counter accept
        ct state invalid counter drop

        # block forwarding DNS over TLS (DoT) completely (because it is worse than DoH with ECH and evades our nice AdGuard DNS server)
        # note that DoH blocking is done by a custom Adguard filter list and special rewrite rules for Apples mask services
        tcp dport 853 oifname @wan_ifaces counter jump reject_with_icmp

        iifname @lan_ifaces counter jump lan_forward
        iifname @wan_ifaces counter jump wan_forward
        iifname @guest_ifaces counter jump guest_forward
        iifname @ghetto_ifaces counter jump ghetto_forward
        counter
    }

    chain output {
        type filter hook output priority 0; policy accept;
        counter
    }

    chain postrouting {
        type filter hook postrouting priority 0; policy accept;
        #ip daddr @ipv4_bogons drop
        #ip6 daddr @ipv6_bogons drop
    }
}
